NOTES/CHECKLIST FOR CREATING AND DISTRIBUTION A NEW DISTRIBUTION


Working by default in ~/coding/pyimfit on Mac.
[mac] = macOS (either version)
[mac-x86] = Intel macOS
[mac-arm64] = arm64 (Apple silicon) macOS
[vm] = Linux VM on Intel macOS

[opt] = possibly optional (i.e., do only "IF NECESSARY")


[opt]1. Generate updated libimfit.a for macOS [x86-64], IF NECESSARY
    A. [mac-x86] cd imfit
    B. [mac-x86] git pull origin master   [if necessary]
    C. [mac-x86] scons --clang-openmp libimfit.a
    D. [mac-x86] cp libimfit.a ../prebuilt/macos
    # copy updated Imfit C++ header files
    E. [mamac-x86c] cd .. ; ./update_from_imfit.sh

[opt]1. Generate updated libimfit.a for macOS [arm64], IF NECESSARY
    A. [mac-arm64] cd imfit
    B. [mac-arm64] git pull origin master   [if necessary]
    C. [mac-arm64]] scons --clang-openmp libimfit.a
    D. [mac-arm64]] cp libimfit.a ../prebuilt/macos
    # copy updated Imfit C++ header files
    E. [mac-arm64]] cd .. ; ./update_from_imfit.sh

[opt]2. Generate updated libimfit.a for Linux [VM: ubuntu64-18_iraf], IF NECESSARY
    A. [vm] cd /home/vagrant/build/pyimfit/imfit
    B. [vm] git pull origin master   [if necessary]
    C. [vm] scons libimfit.a
    D. [vm] cp libimfit.a /vagrant/transfer
    E. [mac] cp ~/vagrant/ubuntu64-18_iraf/transfer/libimfit.a ./prebuilt/linux64

3.A. Do new "develop" install and run tests on macOS-x86
    [mac-x86] $ pip3 install -e ./
    [mac-x86] $ cd pyimfit/tests ; pytest

3.B. Do new "develop" install and run tests on macOS-arm64
    [mac-arm64] $ pip3 install -e ./
    [mac-arm64] $ cd pyimfit/tests ; pytest

4. Do new "develop" install and run tests on Linux VM
    (note: currently we do this using the ubuntu64-16_dev VM because that has the right
    Python installations, including numpy)
    [mac] $ cd ~/vagrant/ubuntu64-16_dev/transfer
    [mac] $ git clone ~/coding/pyimfit pyimfit
    [vm] $ cd /vagrant/transfer/pyimfit
    [vm] $ pip3 install --user -e ./
    [vm] $ cd pyimfit/tests ; pytest

5. Update version number in pyimfit/__init__.py

6. Generate new version of docs [docs/howto_generate_docs.txt]
    A. cd docs
    B. Update version number in conf.py
    C. IF the Jupyter notebook files have been updated, generate markdown versions with
        [NOTE: this currently works on my Intel MBPro *if* I do it from the py312_working conda
        environment]
        $ jupyter nbconvert --to markdown pyimfit_emcee.ipynb
        $ jupyter nbconvert pyimfit_bootstrap_BtoT.ipynb --to markdown
    D. Generate updated documentation
	    $ ./make_docs.sh
	E. View resulting docs in a web browser pointed at
	    file:///Users/erwin/coding/pyimfit/docs/_build/html/index.html
    F. Commit the changes, upload to github
        $ git commit -a -m "Updated documentation"      [or something like that]
        $ git push

7. See if updated version passes Github Workflows CI tests


8.A. Generate source distribution and Mac binary wheels on Intel Mac:
    $ ./make_upload.py x.x.x   [where "x.x.x" = version number]

8.B. Same, on arm64 Mac
    $ ./make_upload.py x.x.x   [where "x.x.x" = version number]

8.C. Copy wheels tp one Mac (arm64 to Intel, or vice-versa)
    copy binary wheels to ~/coding/pyimfit/dist/

9. Upload wheels to PyPI
    $ ./make_upload.py x.x.x --skip-build --test-upload
    $ ./make_upload.py x.x.x --skip-build --upload

9. Test installation via pip

pip install -i https://test.pypi.org/simple/ pyimfit==0.9.0


Note that we can in principle upload conda packages to anaconda from either Intel or arm64 mac.
The following steps assume we are doing the upload from Intel mac.
For the time being, it's probably best to focus on Intel mac, since we run the Linux VM there.

10. Generate conda packages on Intel Mac
    A. [mac-x86] cd conda
    B. [mac-x86] Update rattler_setup/recipe.yaml file [e.g., update version number]
#     C. [mac-x86] rm -rf output
    C. [mac-x86] rattler-build build --recipe ./rattler_setup --variant-config ./rattler_setup/variant_config.yaml

11. Generate conda packages on arm64 Mac
    A. [mac-arm64] cd conda
    B. [mac-arm64] Update rattler_setup/recipe.yaml file [e.g., update version number]
#    C. [mac-arm64] rm -rf output
    C. [mac-arm64] rattler-build build --recipe ./rattler_setup --variant-config ./rattler_setup/variant_config.yaml
    D. [if using Intel Mac for uploading:] Transfer conda packages to Intel Mac; place them in
        .../pyimfit/conda/output/osx-arm64/

12. Generate conda packages on Linux VM
    A. [vm] cd /home/vagrant/build/pyimfit
    B. [vm] git pull origin master   [if necessary]
    C. [vm] cd conda
    D. [vm] rm -rf output
    E. Update rattler_setup/recipe.yaml file [e.g., update version number], if necessary
    F. [vm] rattler-build build --recipe ./rattler_setup --variant-config ./rattler_setup/variant_config.yaml
    G. [vm] cd output
    H. [vm] tar -cf linux-64.tar linux-64 && gzip linux-64.tar
    I. [vm] cp linux-64.tar.gz /vagrant/transfer/
    K. [mac-x86] cd /Users/erwin/coding/pyimfit/conda
    K. [mac-x86] tar -xf ~/vagrant/iraf/transfer/linux-64.tar.gz -C output

12. Upload conda packages to anaconda [from Intel mac
    A. [mac-x86] cd conda
    A. [mac-x86] conda activate
    B. [mac-x86] anaconda login
    C. [mac-x86] anaconda upload output/osx-64/pyimfit-*.conda output/osx-arm64/pyimfit-*.conda output/linux-64/pyimfit-*.conda

